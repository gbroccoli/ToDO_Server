#!/usr/bin/env python

# The code you provided is a Python script that checks
# the operating system and runs different commands
# based on the operating system.

from sys import platform
import subprocess
from core.utiliset.secretgenerate import create_or_load_secret_key
from core.utiliset.init_env import get_venv
from core.utiliset.database_al import alembic_create_migration, alembic_upgrade, create_model_file, downground


def checkOperatingSystem():
	if platform.startswith("win"):
		subprocess.run("cls", shell=True)
		return "win"
	elif platform.startswith("linux"):
		subprocess.run("clear", shell=True)
		return "all"


try:
	import click

	@click.command()
	def secretgenerate():
		create_or_load_secret_key()
		click.echo("Generating secret key successfully")

	@click.command()
	def run():
		"""
		Команда для запуска сервера
		"""

		if checkOperatingSystem() == "win":
			subprocess.run("py main.py", shell=True)
		else:
			subprocess.run("python3 main.py", shell=True)
		
	@click.command()
	@click.argument("message")
	def createmigration(message):
		"""Команда для создания новой миграции."""
		alembic_create_migration(message)
	

	@click.command()
	def upgrademigration():
		"""Команда для применения миграций."""
		alembic_upgrade()

	@click.command()
	@click.argument("table_name")
	def createmodel(table_name):
		"""Создает файл модели SQLAlchemy."""
		create_model_file(table_name)
		click.echo(f"Model file for {table_name} created successfully.")

	@click.command()
	@click.argument("count")
	def downgrade(count):
		downgrade(count)
		click.echo(f"Model file for {count} downgraded successfully.")

	@click.group()
	def cli():
		pass

	cli.add_command(run)
	cli.add_command(secretgenerate)
	cli.add_command(createmigration)
	cli.add_command(upgrademigration)
	cli.add_command(createmodel)
	cli.add_command(downgrade)

except ModuleNotFoundError:
	cli = None


if __name__ == "__main__":
	if get_venv():
		if cli:
			cli()
